# docker-compose.production.yml - Production Docker Configuration
# Production-ready configuration with multi-database support, monitoring, and optimization

version: '3.8'

services:
  # Main LibreChat Application
  librechat:
    container_name: librechat-app
    image: ghcr.io/danny-avila/librechat:latest
    restart: unless-stopped
    ports:
      - "${PORT:-3080}:${PORT:-3080}"
    depends_on:
      - database
      - meilisearch
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - PORT=${PORT:-3080}
      # Database Configuration
      - DATABASE_TYPE=${DATABASE_TYPE:-mongodb}
      # MongoDB Configuration
      - MONGO_URI=${MONGO_URI:-mongodb://mongodb:27017/LibreChat}
      # PostgreSQL Configuration  
      - POSTGRES_HOST=${POSTGRES_HOST:-postgresql}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE:-librechat}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME:-librechat_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      # Enhanced PostgreSQL Performance Settings
      - POSTGRES_MAX_CONNECTIONS=${POSTGRES_MAX_CONNECTIONS:-20}
      - POSTGRES_MIN_CONNECTIONS=${POSTGRES_MIN_CONNECTIONS:-2}
      - POSTGRES_IDLE_TIMEOUT=${POSTGRES_IDLE_TIMEOUT:-30000}
      - POSTGRES_CONNECTION_TIMEOUT=${POSTGRES_CONNECTION_TIMEOUT:-30000}
      - POSTGRES_ACQUIRE_TIMEOUT=${POSTGRES_ACQUIRE_TIMEOUT:-60000}
      - POSTGRES_STATEMENT_TIMEOUT=${POSTGRES_STATEMENT_TIMEOUT:-30000}
      - POSTGRES_QUERY_TIMEOUT=${POSTGRES_QUERY_TIMEOUT:-30000}
      - POSTGRES_SLOW_QUERY_THRESHOLD=${POSTGRES_SLOW_QUERY_THRESHOLD:-1000}
      - POSTGRES_SSL=${POSTGRES_SSL:-false}
      # Search Configuration
      - MEILI_HOST=http://meilisearch:7700
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY:-}
      # Security
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      # Performance
      - NODE_OPTIONS=--max-old-space-size=2048
    volumes:
      - ./logs:/app/api/logs
      - ./uploads:/app/uploads
      - ./config:/app/config
      - ./images:/app/client/public/images
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-3080}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  # Database Service (conditional based on DATABASE_TYPE)
  database:
    profiles:
      - mongodb
      - postgresql
    image: ${DATABASE_TYPE:-mongodb}
    restart: unless-stopped
    
  # MongoDB Service
  mongodb:
    container_name: librechat-mongodb
    image: mongo:7
    restart: unless-stopped
    profiles:
      - mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-}
      - MONGO_INITDB_DATABASE=LibreChat
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./backups/mongodb:/backups
    command: mongod --auth
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  # PostgreSQL Service
  postgresql:
    container_name: librechat-postgresql
    image: postgres:15
    restart: unless-stopped
    profiles:
      - postgresql
    environment:
      - POSTGRES_DB=${POSTGRES_DATABASE:-librechat}
      - POSTGRES_USER=${POSTGRES_USERNAME:-librechat_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
      # Performance tuning
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    ports:
      - "5432:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./backups/postgresql:/backups
      - ./api/dal/migrations/postgresql:/docker-entrypoint-initdb.d
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=all
      -c log_duration=on
      -c log_min_duration_statement=1000
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME:-librechat_user} -d ${POSTGRES_DATABASE:-librechat}"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  # MeiliSearch Service
  meilisearch:
    container_name: librechat-meilisearch
    image: getmeili/meilisearch:v1.7
    restart: unless-stopped
    ports:
      - "7700:7700"
    environment:
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY:-}
      - MEILI_NO_ANALYTICS=${MEILI_NO_ANALYTICS:-true}
      - MEILI_ENV=production
      - MEILI_LOG_LEVEL=INFO
      - MEILI_DB_PATH=/meili_data
    volumes:
      - meilisearch_data:/meili_data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  # Redis Service (optional, for caching and sessions)
  redis:
    container_name: librechat-redis
    image: redis:7-alpine
    restart: unless-stopped
    profiles:
      - redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy (optional)
  nginx:
    container_name: librechat-nginx
    image: nginx:alpine
    restart: unless-stopped
    profiles:
      - nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - librechat
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    container_name: librechat-prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    profiles:
      - monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana Dashboard (optional)
  grafana:
    container_name: librechat-grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    profiles:
      - monitoring
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

volumes:
  mongodb_data:
    driver: local
  postgresql_data:
    driver: local
  meilisearch_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: librechat-network
